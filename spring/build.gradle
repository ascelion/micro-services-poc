
apply plugin: 'org.springframework.boot'
apply plugin: 'application'

mainClassName = 'ascelion.micro.spring.ProductsApplication'

distZip.enabled = false
distTar.enabled = false
bootDistZip.enabled = false

distributions {
	boot.contents.into '/'
}

dependencies {
	implementation project( ':shared' )

	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'

	implementation "org.springframework.security:spring-security-jwt:$jwtVersion"
	implementation "org.springframework.security.oauth:spring-security-oauth2:$springBootOAuth2Version"

	implementation "io.springfox:springfox-swagger2:$swaggerVersion"
	implementation "io.springfox:springfox-swagger-ui:$swaggerVersion"
	implementation "io.springfox:springfox-bean-validators:$swaggerVersion"

	implementation 'ascelion.public:flywaydb-ext-util5'
	implementation 'ascelion.public:flywaydb-ext-shared'

	implementation 'org.flywaydb:flyway-core'

	runtimeOnly 'org.postgresql:postgresql'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	testRuntimeOnly 'com.h2database:h2'
}

task startDB(type: Exec) {
	executable 'docker'

	args 'run', '--name', "${project.name}-db"
	args '-d', '--rm'
	args '-e', "POSTGRES_USER=$project.name"
	args '-e', "POSTGRES_PASSWORD=$project.name"
	args '-e', "POSTGRES_DB=$project.name"
	args '-p', '15432:5432'
	args 'postgres:9.5'
}

task stopDB(type: Exec) {
	executable 'docker'

	args 'stop', "${project.name}-db"
}

bootRun {
	systemProperty "spring.profiles.active", 'dev'
	systemProperty "database.port", '15432'
	systemProperty "dataImportLocation", rootProject.file( 'docker' )
}

task localRun {
	doFirst {
		bootRun.configure {
			systemProperty "database.port", '5432'
		}
	}

	finalizedBy bootRun
}

test {
	systemProperty 'spring.profiles.active', 'test'
}

jacocoTestReport {
	afterEvaluate {
		classDirectories = files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
				'**/migration/*.*'
			])
		})
	}
}

