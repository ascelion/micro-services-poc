
buildscript {
	repositories {
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
		classpath "pl.allegro.tech.build:axion-release-plugin:1.10.+"
	}
}

apply plugin: 'pl.allegro.tech.build.axion-release'

group = 'ascelion.poc'
version = scmVersion.version

task clean {
}

allprojects {
	ext {
		set( 'isRelease', !rootProject.version.endsWith( '-SNAPSHOT' ) )
	}

	repositories {
		mavenLocal()
		jcenter()
	}

	apply plugin: 'eclipse'

	task 'clean-ext'(type: Delete) {
		delete 'bin', 'target', '*.log'

		clean.dependsOn it
	}

	cleanEclipse {
		delete '.settings', '.classpath'
	}

	defaultTasks 'clean', 'assemble'
}

subprojects { sub ->
	group = rootProject.group
	version = rootProject.version

	apply plugin: 'java'

	sourceCompatibility = '1.8'
	targetCompatibility = '1.8'

	apply from: rootProject.file('lombok.gradle')
	apply from: rootProject.file('tests.gradle')

	tasks.withType( AbstractArchiveTask ) {
		// strip version from archive name
		archiveVersion = ''
	}

	plugins.withType( ApplicationPlugin ) {
		mainClassName = 'ascelion.micro.Main'
	}
	plugins.withType( DistributionPlugin ) {
		distributions.all {
			contents.into '/'
		}

		plugins.withId( 'org.springframework.boot' ) {
			distZip.enabled = false
			distTar.enabled = false
			tasks.all { if( it.name == 'bootDistZip' ) it.enabled = false }
		}

		if( sub.hasProperty( 'portBase' ) ) {
			sub.apply from: rootProject.file( 'docker.gradle' )
		}
	}
	plugins.withId( 'org.springframework.boot' ) {
		bootRun {
			systemProperty "spring.profiles.active", 'dev'
			systemProperty "APP_NAME", project.name
			systemProperty "LOG_PATH", buildDir
			systemProperty "dataImportLocation", project.file( 'data' )
		}
		task localRun {
			doFirst {
				bootRun.configure {
					systemProperty "database.port", '5432'
				}
			}

			finalizedBy bootRun
		}
	}

	if( isRelease ) {
		tasks.withType( Jar ) {
			manifest {
				attributes(
					'Built-By'       : System.properties['user.name'],
					'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
					'Build-Branch'   : scmVersion.scmPosition.branch,
					'Build-Commit'   : scmVersion.scmPosition.revision,
					'Build-Revision' : "${scmVersion.version}-${scmVersion.scmPosition.shortRevision}",
					'Created-By'     : "Gradle ${gradle.gradleVersion}",
					'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
					'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
				)
			}
		}
	}

	dependencies {
		implementation platform( "org.springframework.boot:spring-boot-dependencies:$springBootVersion" )
		implementation platform( 'org.springframework.cloud:spring-cloud-dependencies:Greenwich.SR3' )
		implementation platform( 'ascelion.flywaydb:flywaydb-ext:0.1.5' )

		constraints {
			implementation 'jakarta.enterprise:jakarta.enterprise.cdi-api:2.0.2'
			implementation 'jakarta.persistence:jakarta.persistence-api:2.2.2'
			implementation 'jakarta.servlet:jakarta.servlet-api:4.0.2'
			implementation 'jakarta.transaction:jakarta.transaction-api:1.3.3'
			implementation 'jakarta.validation:jakarta.validation-api:2.0.1'

			implementation 'org.apache.commons:commons-lang3:3.9'

			implementation 'io.swagger:swagger-annotations:1.5.23'
		}

		runtimeOnly 'org.postgresql:postgresql'

		testRuntimeOnly 'com.h2database:h2'
	}

	eclipse.project.name = "${project.group}.${rootProject.name}${path.replace(':', '-')}"
}

eclipse.project.name = "${project.group}.${name}"
