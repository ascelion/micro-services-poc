
buildscript {
	repositories {
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
		classpath "pl.allegro.tech.build:axion-release-plugin:1.10.+"
		classpath 'org.yaml:snakeyaml:1.25'
	}
}

apply plugin: 'pl.allegro.tech.build.axion-release'

group = 'ascelion.poc'
version = scmVersion.version

task clean {
	doLast {
		delete buildDir
	}
}

allprojects {
	ext {
		set( 'isRelease', !rootProject.version.endsWith( '-SNAPSHOT' ) )
		set( 'dockerTag', isRelease ? project.version : new java.text.SimpleDateFormat("'0.'yyMMdd'.'HHmm").format(new Date()) )
	}

	repositories {
		mavenLocal()
		jcenter()

		maven {
			name = 'flywaydb-snapshots'
			url = 'https://oss.jfrog.org/artifactory/oss-snapshot-local'
		}
	}

	apply plugin: 'eclipse'
	apply plugin: 'extend-project'

	task 'clean-ext'(type: Delete) {
		delete 'bin', 'target', '*.log'

		clean.dependsOn it
	}

	cleanEclipse {
		delete '.settings', '.classpath'
	}

	defaultTasks 'clean', 'assemble'
}

subprojects {
	group = rootProject.group
	version = rootProject.version

	plugins.withType( JavaPlugin ) {
		sourceCompatibility = '11'
		targetCompatibility = '11'

		project.apply from: rootProject.file('lombok.gradle')
		project.apply from: rootProject.file('tests.gradle')
	}
	tasks.withType( AbstractArchiveTask ) {
		// strip version from archive name
		archiveVersion = ''
	}

	plugins.withId( 'org.springframework.boot' ) {
		project.apply plugin: 'application'
		project.apply from: rootProject.file( 'docker.gradle' )

		mainClassName = 'ascelion.micro.Main'

		bootRun {
			systemProperty "spring.profiles.active", 'dev'
			systemProperty "APP_NAME", project.name
			systemProperty "LOG_PATH", buildDir
			systemProperty "dataImportLocation", project.file( 'data' )

			jvmArgs '--illegal-access=permit'
		}

		distributions.all {
			contents.into '/'
		}

		tasks.all {
			if( it.name == 'bootDistZip' ) it.enabled = false
			if( it.name == 'bootDistTar' ) it.enabled = false
		}

		distZip.enabled = false

		compileJava {
			dependsOn 'checkDevProfile'
		}
	}
	plugins.withType( ascelion.micro.gradle.DockerPlugin ) {
		docker {
			name 'poc'
			//tagName dockerTag
			tagName 'latest'

			configuration {
				publish     = isRelease ? false : booleanProperty( 'ublish-services', false )
				application = project.name

				hasDatabase = true

				repository  = project.hasProperty( 'docker.repository' ) ? project.ext['docker.repository'] + '/' : ''
				portRange   = integerProperty( 'port-range', 10 )
			}
		}
	}

	if( isRelease ) {
		tasks.withType( Jar ) {
			manifest {
				attributes(
						'Built-By'       : System.properties['user.name'],
						'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
						'Build-Branch'   : scmVersion.scmPosition.branch,
						'Build-Commit'   : scmVersion.scmPosition.revision,
						'Build-Revision' : "${scmVersion.version}-${scmVersion.scmPosition.shortRevision}",
						'Created-By'     : "Gradle ${gradle.gradleVersion}",
						'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
						'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
						)
			}
		}
	}

	plugins.withType( JavaPlugin ) {
		jar {
			baseName = "poc-${project.name}"
		}

		dependencies {
			implementation platform( "org.springframework.boot:spring-boot-dependencies:$springBootVersion" )
			implementation platform( 'org.springframework.cloud:spring-cloud-dependencies:Greenwich.SR3' )

			implementation platform( 'ascelion.flywaydb:flywaydb-ext:1.0.0' )

			constraints {
				implementation 'jakarta.enterprise:jakarta.enterprise.cdi-api:2.0.2'
				implementation 'jakarta.persistence:jakarta.persistence-api:2.2.3'
				implementation 'jakarta.servlet:jakarta.servlet-api:4.0.2'
				implementation 'jakarta.transaction:jakarta.transaction-api:1.3.3'
				implementation 'jakarta.validation:jakarta.validation-api:2.0.1'

				implementation 'com.github.dozermapper:dozer-core:6.5.0'

				implementation 'jakarta.el:jakarta.el-api:3.0.3'
				implementation 'org.glassfish:jakarta.el:3.0.3'

				implementation "org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-rest:$camundaVersion"
				implementation "org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-webapp:$camundaVersion"
				implementation "org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-test:$camundaVersion"

				implementation 'org.apache.commons:commons-lang3:3.9'
				implementation 'org.apache.commons:commons-text:1.8'

				implementation 'io.swagger:swagger-annotations:1.5.23'
			}

			runtimeOnly 'org.postgresql:postgresql'
			runtimeOnly 'org.glassfish.jaxb:jaxb-runtime:2.3.1'

			testRuntimeOnly 'com.h2database:h2'
		}
	}

	eclipse.project.name = "${project.group}.${rootProject.name}${path.replace(':', '-')}"
	eclipse.classpath.downloadSources = true
}

eclipse.project.name = "${project.group}.${name}"

wrapper {
	distributionType = 'all'
}

