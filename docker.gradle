import org.apache.tools.ant.filters.*

def dockerSize = hasProperty( 'useInstance' ) ? useInstance : 10
def dockerData = hasProperty( 'useDatabase' )
def dockerFile = dockerData ? 'docker-compose-db.yml' : 'docker-compose.yml'
def dockerDist = file( "${buildDir}/distributions" )

def jdbcPort = Integer.toString( portBase + 5432 )

def httpPort1 = Integer.toString( portBase + 8080 )
def httpPort2 = Integer.toString( portBase + 8080 + dockerSize - 1 )

task 'docker-files'(type: Copy) {
	doFirst {
		mkdir "${dockerDist}/data"
	}

	into dockerDist

	from( rootProject.file('docker') ) {
		if( dockerData ) {
			include 'docker-compose-db.yml'
			include 'database.*'
		}
		else {
			include 'docker-compose.yml'
		}

		include 'application.txt'

		filter ReplaceTokens, tokens: [
			application: project.name,
			APPLICATION: project.name.toUpperCase(),
			network: rootProject.name,
			jdbcPort: jdbcPort,
			httpPort1: httpPort1,
			httpPort2: httpPort2,
			repository: '',
//			repository: 'localhost:5000/poc/',
			]
	}
	from( file('data') ) {
		into 'data'
	}
}

task 'docker-build'(type: Exec) {
	dependsOn 'docker-files'
	dependsOn 'assemble'

	def touch = file( "${dockerDist}/${project.name}.touch")

	doLast {
		ant.touch( file: touch )
	}

	inputs.files fileTree( dockerDist ) {
		exclude '*.touch'
	}
	outputs.files touch

	executable 'docker-compose'
	workingDir dockerDist

	args '-f', dockerFile, '-p', dockerName
	args 'build'
}

task 'docker-up'(type: Exec) {
	dependsOn 'docker-build', 'stopDB'

	executable 'docker-compose'
	workingDir dockerDist

	args '-f', dockerFile, '-p', dockerName
	args 'up', '-d'

	if( dockerSize > 1 && project.hasProperty( 'scale' ) ) {
		if( Integer.parseInt( scale ) <= dockerSize ) {
			args '--scale', "${project.name}=$scale"
		}
	}
}

task 'docker-stop'(type: Exec) {
	dependsOn 'docker-files'

	executable 'docker-compose'
	workingDir dockerDist

	ignoreExitValue true

	args '-f', dockerFile
	args 'stop'
}

task 'docker-down'(type: Exec) {
	dependsOn 'docker-files'

	executable 'docker-compose'
	workingDir dockerDist

	ignoreExitValue true

	args '-f', dockerFile, '-p', dockerName
	args 'down', '--remove-orphans'
}

bootRun {
	systemProperty "database.port", jdbcPort
}

task startDB(type: Exec) {
	enabled = dockerData

	executable 'docker'

	args 'run', '--name', "${project.name}-db-dev"
	args '-d', '--rm'
	args '-e', "POSTGRES_USER=$project.name"
	args '-e', "POSTGRES_PASSWORD=$project.name"
	args '-e', "POSTGRES_DB=$project.name"
	args '-p', "${jdbcPort}:5432"
	args 'postgres:11.5'
}

task stopDB(type: Exec) {
	enabled = dockerData

	executable 'docker'

	ignoreExitValue true

	args 'stop', "${project.name}-db-dev"
}
